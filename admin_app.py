# admin_app.py
import cv2
import tkinter as tk
from tkinter import ttk, messagebox
import os
import pandas as pd
import time

# Import t·ª´ c√°c module ƒë√£ t√°ch
from admin.admin_functions import AdminFunctions
from database.database_manager import load_attendance, save_attendance
from utils.face_recognizer_utils import get_name_for_id
import config # Import config.py

class AdminApp:
    def __init__(self, root):
        self.root = root
        self.root.title("H·ªá th·ªëng nh·∫≠n d·∫°ng khu√¥n m·∫∑t - ADMIN PANEL")
        self.root.geometry("1200x800") # K√≠ch th∆∞·ªõc c·ª≠a s·ªï g·ª£i √Ω

        # ƒê·∫£m b·∫£o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt t·ªìn t·∫°i
        os.makedirs(config.DATASET_PATH, exist_ok=True)
        os.makedirs(config.TRAINER_PATH, exist_ok=True)

        self.names = {} # Dictionary ƒë·ªÉ l∆∞u tr·ªØ user_id v√† t√™n ng∆∞·ªùi d√πng
        self.load_existing_users()

        # T·∫°o c√°c widget GUI chung cho AdminApp
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # Khung ch·ª©a video v√† tr·∫°ng th√°i
        video_status_frame = ttk.Frame(main_frame)
        video_status_frame.pack(side=tk.TOP, pady=10)

        self.video_label = ttk.Label(video_status_frame, text="Camera Feed", background="black") # B·ªè width v√† height
        self.video_label.pack(side=tk.TOP, padx=5, pady=5)

        self.result_label = ttk.Label(video_status_frame, text="", font=('Helvetica', 12))
        self.result_label.pack(side=tk.TOP, fill=tk.X, pady=5)

        self.status_label = ttk.Label(video_status_frame, text="S·∫µn s√†ng", font=("Helvetica", 11), foreground="blue")
        self.status_label.pack(side=tk.TOP, pady=5)


        # Kh·ªüi t·∫°o AdminFunctions, truy·ªÅn c√°c widget ƒë√£ t·∫°o
        self.admin_functions = AdminFunctions(
            self.root, self.video_label, self.status_label, self.result_label, self.names
        )

        # T·∫°o c√°c n√∫t ch·ª©c nƒÉng Admin
        self._create_admin_buttons_ui(main_frame)

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def load_existing_users(self):
        # T·∫£i t√™n ng∆∞·ªùi d√πng t·ª´ c√°c file .name.txt trong th∆∞ m·ª•c dataset
        for filename in os.listdir(config.DATASET_PATH):
            if filename.endswith('.name.txt'):
                user_id = filename.split('.')[1]
                name = get_name_for_id(user_id)
                if name:
                    self.names[user_id] = name

    def _create_admin_buttons_ui(self, parent_frame):
        """T·∫°o c√°c n√∫t ch·ª©c nƒÉng d√†nh cho Admin."""
        admin_button_frame = ttk.Frame(parent_frame)
        admin_button_frame.pack(side=tk.TOP, pady=20) # ƒê·∫∑t ·ªü gi·ªØa v√† c√≥ kho·∫£ng c√°ch

        btn_capture = tk.Button(admin_button_frame, text="üì∏ Ch·ª•p ·∫£nh", command=self.admin_functions.start_capture_images,
                                bg="#4CAF50", fg="white", font=("Helvetica", 12, "bold"), width=25, height=2)
        btn_capture.grid(row=0, column=0, padx=10, pady=10)

        btn_train = tk.Button(admin_button_frame, text="üß† Train Model", command=self.admin_functions.train_recognition_model,
                              bg="#2196F3", fg="white", font=("Helvetica", 12, "bold"), width=25, height=2)
        btn_train.grid(row=0, column=1, padx=10, pady=10)

        btn_view_attendance = tk.Button(admin_button_frame, text="üìä Xem Ch·∫•m C√¥ng", command=self.admin_functions.view_attendance_records,
                                        bg="#9C27B0", fg="white", font=("Helvetica", 12, "bold"), width=25, height=2)
        btn_view_attendance.grid(row=1, column=0, padx=10, pady=10)

        btn_reports = tk.Button(admin_button_frame, text="üìà Th·ªëng k√™ - B√°o c√°o", command=self.admin_functions.show_report_window,
                                bg="#FF5722", fg="white", font=("Helvetica", 12, "bold"), width=25, height=2)
        btn_reports.grid(row=1, column=1, padx=10, pady=10)

        btn_manage_users = tk.Button(admin_button_frame, text="üë• Qu·∫£n l√Ω Ng∆∞·ªùi d√πng", command=self.admin_functions.show_user_management_window,
                                     bg="#607D8B", fg="white", font=("Helvetica", 12, "bold"), width=25, height=2)
        btn_manage_users.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

    def on_close(self):
        """D·ª´ng camera v√† tho√°t ·ª©ng d·ª•ng khi ƒë√≥ng c·ª≠a s·ªï."""
        try:
            if self.admin_functions.is_capturing:
                self.admin_functions.stop_capture()
            # Kh√¥ng c·∫ßn stop main_functions ·ªü ƒë√¢y v√¨ AdminApp kh√¥ng ch·∫°y n√≥
            save_attendance(load_attendance()) # ƒê·∫£m b·∫£o l∆∞u d·ªØ li·ªáu cu·ªëi c√πng
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠ ch·∫•m c√¥ng: {str(e)}")
        finally:
            self.root.quit()
            self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = AdminApp(root)
    root.mainloop()